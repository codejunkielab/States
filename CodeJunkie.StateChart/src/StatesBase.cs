namespace CodeJunkie.StateChart;

using System;
using System.Collections.Concurrent;
#if WITH_SERIALIZATION
using CodeJunkie.Serialization;
#else
using CodeJunkie.Collections;
#endif

/// <summary>
/// Represents the base interface for all state charts. Provides common properties and methods
/// for managing state, restoring state, and accessing the internal blackboard.
/// </summary>
public interface IStateChartBase {
  /// <summary>
  /// Gets the current state of the state chart, if any. This property does not initialize
  /// the state chart and may return null if no state is set.
  /// </summary>
  object? ValueAsObject { get; }

  /// <summary>
  /// Gets the state that will be restored when the state chart is started, if any.
  /// </summary>
  object? RestoredState { get; }

  /// <summary>
  /// Gets the internal blackboard used by the state chart for storing shared data.
  /// </summary>
#if WITH_SERIALIZATION
  SerializableBlackboard Blackboard { get; }
#else
  Blackboard Blackboard { get; }
#endif

  /// <summary>
  /// Restores the state of the state chart from the specified object. This method only works
  /// if the current state has not been initialized and the provided <paramref name="state"/>
  /// is of the correct type.
  /// </summary>
  /// <param name="state">The state object to restore.</param>
  void RestoreState(object state);
}

/// <summary>
/// Serves as the common, non-generic base class for all state charts. This class allows
/// identification of all state charts in a codebase by inspecting the derived types
/// generated by the state chart generator.
/// </summary>
public abstract class StateChartBase : IStateChartBase {
  /// <summary>
  /// Gets the unique identifier for this StateChart instance.
  /// </summary>
  internal Guid InstanceId { get; } = Guid.NewGuid();

  /// <inheritdoc />
  public abstract object? ValueAsObject { get; }

  /// <inheritdoc />
  public object? RestoredState { get; set; }

  /// <inheritdoc />
#if WITH_SERIALIZATION
  public SerializableBlackboard Blackboard { get; } = new();
#else
  public Blackboard Blackboard { get; } = new();
#endif

  /// <inheritdoc />
  public abstract void RestoreState(object state);

  /// <summary>
  /// Provides a reference state for each type of state chart. This is used by the state chart
  /// serializer to determine if a given state chart's state has diverged from an unaltered
  /// reference state.
  /// </summary>
  internal static ConcurrentDictionary<Type, object> ReferenceStates { get; } = new();
}
